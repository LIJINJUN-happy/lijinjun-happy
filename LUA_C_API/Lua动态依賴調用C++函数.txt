前言：直接用Lua官方的Lua.exe不可以调用C++的Dll库，会有报错，需要我们自己生成新的Lua.exe Luac.exe Lua.lib Lua.dll

※直接用下载下来的官方Lua.exe解析器会报错（multiple Lua VMs detected），理由如下：
那么如果lua解释器用静态来编译，就会加载一个虚拟机
当解释器去调用c模块时，c模块在编译的时候是需要 conmmit 静态或者动态的lua库的，那么这时候也会加载一个lua虚拟机
所以自然就起了冲突，怎么办呢
其实很简单，只要lua解释器和c库都调用同一个dll就好，dll是共享库，只会加载一次到内存，所以就不会出现冲突。
所以，保证编写的c模块和lua解释器是依赖于同一个Lua的共享库就好。所以不可以直接用我们从官网下载的Lua.exe解析器
我们需要自己去生成一个支持动态链接的Lua.exe解析器

步骤：
建立3个VS工程（空项目）,这里根据需要选择Release以及 是x64，还是x86。
并为其命名：分别代表
1Lua.exe  （这里的项目名为Lua5.3.5）
2Luac.exe （这里的项目名为luac）
3Lua库    （这里的项目名为Lua）

一.首先生成动态库Lua 的 dll（右键，将lua项目设置为启动项目）
（对应一开始创建的3个项目中的lua）
1.在头文件点击右键-》添加现有项-》（将lua的src文件夹内的源码文件，除lua.c和luac.c文件外的其余全部源码文件添加到工程中）
2.右键属性-》配置属性-》常规-》配置类型-》（动态库）.dll
3.在“C/C++” -> “预处理器” -> “预处理器定义” 中添加LUA_BUILD_AS_DLL，添加完后要记得点击保存。
4.设置完后，就可以编译（ctrl+shift+B）。生成lua.lib和lua.dll
5.在Lua源文件内新建一个build目录，将生成的这两个文件进去（到时候需要用到）。

二.生成luac.exe
（对应一开始创建的3个项目中的luac）
1.在头文件点击右键-》添加现有项-》（将lua源码包中src目录中的除lua.c外的所有文件添加进去）
2.检查一下设置，右键属性-》配置属性-》常规-》配置类型-》应用程序（.exe）
3.连接器-》常规-》附加库目录-》添加刚才生成的lua.lib所在的目录（Lua源代码下新建文件夹Build的路劲）
4.连接器-》输入-》附加依赖项-》添加刚才生成的lua.lib文件 （Lua源代码下新建文件夹Build下的lua.lib文件），填上文件名即可（lua.lib）
5.将luac项目设置为启动项目，然后编译（ctrl+shift+B）

三.生成lua.exe
（对应一开始创建的3个项目中的Lua5.3.5）
1.将一开始建立的lua5.3.5项目设置为启动项目，这一步对后面的windows上调用C语言库至关重要。
2.这里要生成的lua.exe是动态库版本的，这一步需要连接的是第一步中生成的lua.lib。具体过程如下：
（1）头文件内添加除lua源码包src目录中的所有头文件，其余.c文件一个也不要
（2）源文件内添加lua.c文件，其余文件一个也不要
3.连接器-》常规-》附加库目录-》添加刚才生成的lua.lib所在的目录（Lua源代码下新建文件夹Build的路劲）
这一步和二中的第3步一样
4.连接器-》输入-》附加依赖项-》添加刚才生成的lua.lib文件 （Lua源代码下新建文件夹Build下的lua.lib文件），填上文件名即可（lua.lib）
这一步和二中的第4步一样
5.配置属性-》常规-》配置类型-》应用程序（.exe）
6.编译生成
7.把生成的Lua5.3.5.exe Luac.exe  Lua.dll Lua.lib 放进Lua源代码的Build中，设置环境变量（将lua.exe所在的路径添加到环境变量中）
8.生成新的Lua.exe这样避免了使用官方的Lua.exe调用C++动态库时候造成多个虚拟机冲突的情况