LUA虚拟栈中的基本操作
---------------------------------------------------------------------------------------------------------------------------------------------------------------------
/* basic stack manipulation--基础栈操作
LUA_API int   (lua_gettop) (lua_State *L);
//获取栈的高度，它也是栈顶元素的索引。注意一个负数索引-x对应于正数索引gettop-x+1

LUA_API void  (lua_settop) (lua_State *L, int idx);
//设置栈的高度。如果开始的栈顶高于新的栈顶，顶部的值被丢弃。否则，为了得到指定的大小这个函数压入相应个数的空值（nil）到栈上。特别的，lua_settop(L,0)清空堆栈。

LUA_API void  (lua_pushvalue) (lua_State *L, int idx);
//压入堆栈上指定索引的一个抟贝到栈顶,【增加一个元素到栈顶】

LUA_API void  (lua_remove) (lua_State *L, int idx);
//移除指定索引位置的元素，并将其上面所有的元素下移来填补这个位置的空白，【删除了一个元素】

LUA_API void  (lua_insert) (lua_State *L, int idx);
//移动栈顶元素到指定索引的位置，并将这个索引位置上面的元素全部上移至栈顶被移动留下的空隔，【没有增加一个元素，移动了元素的位置】

LUA_API void  (lua_replace) (lua_State *L, int idx);
//从栈顶弹出元素值并将其设置到指定索引位置，没有任何移动操作。【删除了一个元素，替换掉指定的元素】

LUA_API int   (lua_checkstack) (lua_State *L, int sz);
//检查栈上是否有能插入n个元素的空间;没有返回0

LUA_API void  (lua_xmove) (lua_State *from, lua_State *to, int n);
//将一个堆栈上的从栈顶起的n个元素  移到另一个堆栈上



lua的堆栈保持着后进先出的原则。如果栈开始于 10 20 30 40 50*（自底向上；`*´ 标记了栈顶），那么：
lua_pushvalue(L, 3)    --> 10 20 30 40 50 30*
lua_pushvalue(L, -1)   --> 10 20 30 40 50 30 30*
lua_remove(L, -3)      --> 10 20 30 40 30 30*
lua_remove(L, 6)      --> 10 20 30 40 30*
lua_insert(L, 1)      --> 30 10 20 30 40*
lua_insert(L, -1)      --> 30 10 20 30 40* (no effect)
lua_replace(L, 2)      --> 30 40 20 30*
lua_settop(L, -3)      --> 30 40*
lua_settop(L, 6)      --> 30 40 nil nil nil nil*
*/
---------------------------------------------------------------------------------------------------------------------------------------------------------------------


C++/C数据传递到虚拟栈中的基本操作（压栈）
---------------------------------------------------------------------------------------------------------------------------------------------------------------------
/* push functions (C -> stack)------>C空间与虚拟栈之间的操作
C语言向虚拟栈中压人符合Lua数据类型(nil,number,string,table,function,userdata,thread)的变量
LUA_API void  (lua_pushnil) (lua_State *L);                                             -- nil
LUA_API void  (lua_pushnumber) (lua_State *L, lua_Number n);                            --double,float
LUA_API void  (lua_pushinteger) (lua_State *L, lua_Integer n);                          --int,long
LUA_API void  (lua_pushlstring) (lua_State *L, const char *s, size_t l);                --任意的字符串(char*类型，允许包含'\0'字符)
LUA_API void  (lua_pushstring) (lua_State *L, const char *s);                           --以'\0'结束的字符串（const char*）
LUA_API const char *(lua_pushvfstring) (lua_State *L, const char *fmt,va_list argp);    
LUA_API const char *(lua_pushfstring) (lua_State *L, const char *fmt, ...);
LUA_API void  (lua_pushcclosure) (lua_State *L, lua_CFunction fn, int n);
LUA_API void  (lua_pushboolean) (lua_State *L, int b);
LUA_API void  (lua_pushlightuserdata) (lua_State *L, void *p);
LUA_API int   (lua_pushthread) (lua_State *L);
*/
---------------------------------------------------------------------------------------------------------------------------------------------------------------------




虚拟栈传递数据给C++/C
---------------------------------------------------------------------------------------------------------------------------------------------------------------------
/*access functions (stack -> C)------>C空间与虚拟栈之间的操作

--（1）--API提供了一套lua_is*函数来检查一个元素是否是一个指定的类型，*可以是任何Lua类型。lua_isnumber和lua_isstring函数不检查这个值是否是指定的类型，而是看它是否能被转换成指定的那种类型。
LUA_API int             (lua_isnumber) (lua_State *L, int idx);
LUA_API int             (lua_isstring) (lua_State *L, int idx);
LUA_API int             (lua_iscfunction) (lua_State *L, int idx);
LUA_API int             (lua_isuserdata) (lua_State *L, int idx);
LUA_API int             (lua_type) (lua_State *L, int idx);
LUA_API const char  *(lua_typename) (lua_State *L, int tp);

--（2）--API提供了虚拟栈上的两个数据的关系
LUA_API int            (lua_equal) (lua_State *L, int idx1, int idx2);--索引 index1 和 index2 中的值相同的话，返回 1 。否则返回 0 。如果任何一个索引无效也会返回 0。
LUA_API int            (lua_rawequal) (lua_State *L, int idx1, int idx2);
LUA_API int            (lua_lessthan) (lua_State *L, int idx1, int idx2);

--（3）--虚拟栈上的lua类型的数据转换成符合C++语言数据类型的数据(int,double,char*,function,void,struct/class(userdata),指针)
LUA_API lua_Number      (lua_tonumber) (lua_State *L, int idx);
LUA_API lua_Integer     (lua_tointeger) (lua_State *L, int idx);
LUA_API int             (lua_toboolean) (lua_State *L, int idx);
LUA_API const char     *(lua_tolstring) (lua_State *L, int idx, size_t *len);
LUA_API size_t          (lua_objlen) (lua_State *L, int idx);
LUA_API lua_CFunction   (lua_tocfunction) (lua_State *L, int idx);
LUA_API void	       *(lua_touserdata) (lua_State *L, int idx);
LUA_API lua_State      *(lua_tothread) (lua_State *L, int idx);
LUA_API const void     *(lua_topointer) (lua_State *L, int idx);
*/
---------------------------------------------------------------------------------------------------------------------------------------------------------------------



虚拟栈获取LUA的数据
---------------------------------------------------------------------------------------------------------------------------------------------------------------------
/*get functions (Lua -> stack)------>Lua空间与虚拟栈之间的操作

LUA_API void  (lua_gettable) (lua_State *L, int idx);
//把 t[k] 值压入堆栈，这里的 t 是指有效索引 index 指向的值，而 k 则是栈顶放的值。这个函数会弹出堆栈上的 key （把结果放在栈上相同位置）。在 Lua 中，这个函数可能触发对应 "index" 事件的元方法
lua_getglobal(L, "mytable") <== push mytable
lua_pushnumber(L, 1)        <== push key 1
lua_gettable(L, -2)         <== pop key 1, push mytable[1]

LUA_API void  (lua_getfield) (lua_State *L, int idx, const char *k);
//把 t[k] 值压入堆栈，这里的 t 是指有效索引 index 指向的值。在 Lua 中，这个函数可能触发对应 "index" 事件的元方法
lua_getglobal(L, "mytable") <== push mytable
lua_getfield(L, -1, "x")    <== push mytable["x"]，作用同下面两行调用
--lua_pushstring(L, "x")    <== push key "x"
--lua_gettable(L,-2)        <== pop key "x", push mytable["x"]

LUA_API void  (lua_rawget) (lua_State *L, int idx);
//类似于 Lua_gettable，但是作一次直接访问（不触发元方法）。

LUA_API void  (lua_rawgeti) (lua_State *L, int idx, int n);
//把 t[n] 的值压栈，这里的 t 是指给定索引 index 处的一个值。这是一个直接访问；就是说，它不会触发元方法。
lua_getglobal(L, "mytable") <== push mytable
lua_rawgeti(L, -1, 1)       <== push mytable[1]，作用同下面两行调用
--lua_pushnumber(L, 1)      <== push key 1
--lua_rawget(L,-2)          <== pop key 1, push mytable[1]

LUA_API void  (lua_createtable) (lua_State *L, int narr, int nrec);
//创建一个新的空 table 压入堆栈。这个新 table 将被预分配 narr 个元素的数组空间以及 nrec 个元素的非数组空间。当你明确知道表中需要多少个元素时，预分配就非常有用。如果你不知道，可以使用函数 Lua_newtable。

LUA_API void *(lua_newuserdata) (lua_State *L, size_t sz);
//这个函数分配分配一块指定大小的内存块，把内存块地址作为一个完整的 userdata 压入堆栈，并返回这个地址。
userdata 代表 Lua 中的 C 值。完整的 userdata 代表一块内存。它是一个对象（就像 table 那样的对象）：你必须创建它，它有着自己的元表，而且它在被回收时，可以被监测到。一个完整的 userdata 只和它自己相等（在等于的原生作用下）。
当 Lua 通过 gc 元方法回收一个完整的 userdata 时， Lua 调用这个元方法并把 userdata 标记为已终止。等到这个 userdata 再次被收集的时候，Lua 会释放掉相关的内存。

LUA_API int   (lua_getmetatable) (lua_State *L, int objindex);
//把给定索引指向的值的元表压入堆栈。如果索引无效，或是这个值没有元表，函数将返回 0 并且不会向栈上压任何东西。

LUA_API void  (lua_getfenv) (lua_State *L, int idx);
//把索引处值的环境表压入堆栈。
*/
---------------------------------------------------------------------------------------------------------------------------------------------------------------------



虚拟栈发送数据给LUA
---------------------------------------------------------------------------------------------------------------------------------------------------------------------
/*set functions (stack -> Lua)------>Lua空间与虚拟栈之间的操作

LUA_API void  (lua_settable) (lua_State *L, int idx);
//作一个等价于 t[k] = v 的操作，这里 t 是一个给定有效索引 index 处的值， v 指栈顶的值，而 k 是栈顶之下的那个值。这个函数会把键和值都从堆栈中弹出。和在 Lua 中一样，这个函数可能触发 "newindex" 事件的元方法。eg:
lua_getglobal(L, "mytable") <== push mytable
lua_pushnumber(L, 1)        <== push key 1
lua_pushstring(L, "abc")    <== push value "abc"
lua_settable(L, -3)         <== mytable[1] = "abc", pop key & value

LUA_API void  (lua_setfield) (lua_State *L, int idx, const char *k);
//做一个等价于 t[k] = v 的操作，这里 t 是给出的有效索引 index 处的值，而 v 是栈顶的那个值。这个函数将把这个值弹出堆栈。跟在 Lua 中一样，这个函数可能触发一个 "newindex" 事件的元方法。eg:
lua_getglobal(L, "mytable") <== push mytable
lua_pushstring(L, "abc")    <== push value "abc"
lua_setfield(L, -2, "x")    <== mytable["x"] = "abc", pop value "abc"

LUA_API void  (lua_rawset) (lua_State *L, int idx);
//类似于 Lua_settable，但是是作一个直接赋值（不触发元方法）。

LUA_API void  (lua_rawseti) (lua_State *L, int idx, int n);
//等价于 t[n] = v，这里的 t 是指给定索引 index 处的一个值，而 v 是栈顶的值。函数将把这个值弹出栈。赋值操作是直接的；就是说，不会触发元方法。
lua_getglobal(L, "mytable") <== push mytable
lua_pushstring(L, "abc")    <== push value "abc"
lua_rawseti(L, -2, 1)       <== mytable[1] = "abc", pop value "abc"

LUA_API int   (lua_setmetatable) (lua_State *L, int objindex);
//把一个 table 弹出堆栈，并将其设为给定索引处的值的 metatable 。

LUA_API int   (lua_setfenv) (lua_State *L, int idx);
//从堆栈上弹出一个 table 并把它设为指定索引处值的新环境。如果指定索引处的值即不是函数又不是线程或是 userdata ， Lua_setfenv 会返回 0 ，否则返回 1 。
*/
---------------------------------------------------------------------------------------------------------------------------------------------------------------------



















